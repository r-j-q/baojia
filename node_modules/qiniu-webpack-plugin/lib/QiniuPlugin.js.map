{"version":3,"sources":["../src/QiniuPlugin.js"],"names":["QiniuPlugin","options","ACCESS_KEY","SECRET_KEY","Error","Object","assign","conf","compiler","plugin","compilation","callback","assets","hash","bucket","include","path","replace","promises","keys","filter","fileName","valid","emitted","some","includeFileName","RegExp","test","map","key","putPolicy","rs","PutPolicy","token","extra","io","PutExtra","promise","resolve","reject","begin","Date","now","putFile","existsAt","err","ret","duration","all","then","res","console","log","catch","e"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;IAEMA,W;AAEJ,uBAAYC,OAAZ,EAAqB;AAAA;;AACnB,QAAI,CAACA,OAAD,IAAY,CAACA,QAAQC,UAArB,IAAmC,CAACD,QAAQE,UAAhD,EAA4D;AAC1D,YAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;AACD,SAAKH,OAAL,GAAeI,OAAOC,MAAP,CAAc,EAAd,EAAkBL,OAAlB,CAAf;AACA,oBAAMM,IAAN,CAAWL,UAAX,GAAwB,KAAKD,OAAL,CAAaC,UAArC;AACA,oBAAMK,IAAN,CAAWJ,UAAX,GAAwB,KAAKF,OAAL,CAAaE,UAArC;AACD;;;;0BAEKK,Q,EAAU;AAAA;;AACdA,eAASC,MAAT,CAAgB,YAAhB,EAA8B,UAACC,WAAD,EAAcC,QAAd,EAA2B;AACvD,YAAMC,SAASF,YAAYE,MAA3B;AACA,YAAMC,OAAOH,YAAYG,IAAzB;AAFuD,uBAMnD,MAAKZ,OAN8C;AAAA,YAIrDa,MAJqD,YAIrDA,MAJqD;AAAA,YAKrDC,OALqD,YAKrDA,OALqD;AAAA,4BASnD,MAAKd,OAT8C,CAQrDe,IARqD;AAAA,YAQrDA,IARqD,iCAQ9C,QAR8C;;;AAWvDA,eAAOA,KAAKC,OAAL,CAAa,QAAb,EAAuBJ,IAAvB,CAAP;;AAEA,YAAMK,WAAWb,OAAOc,IAAP,CAAYP,MAAZ,EAAoBQ,MAApB,CAA2B,UAACC,QAAD,EAAc;AACxD,cAAIC,QAAQV,OAAOS,QAAP,EAAiBE,OAA7B;AACA,cAAIR,OAAJ,EAAa;AACXO,oBAAQA,SACHP,QAAQS,IAAR,CACD,UAACC,eAAD,EAAqB;AACnB,kBAAIA,2BAA2BC,MAA/B,EAAuC;AACrC,uBAAOD,gBAAgBE,IAAhB,CAAqBN,QAArB,CAAP;AACD;AACD,qBAAOI,oBAAoBJ,QAA3B;AACD,aANA,CADL;AASD;AACD,iBAAOC,KAAP;AACD,SAdgB,EAcdM,GAdc,CAcV,UAACP,QAAD,EAAc;AACnB,cAAMQ,MAAM,qBAAM,gBAAKb,IAAL,EAAWK,QAAX,CAAN,CAAZ;AACA,cAAMS,YAAY,IAAI,gBAAMC,EAAN,CAASC,SAAb,CAA0BlB,MAA1B,SAAoCe,GAApC,CAAlB;AACA,cAAMI,QAAQH,UAAUG,KAAV,EAAd;AACA,cAAMC,QAAQ,IAAI,gBAAMC,EAAN,CAASC,QAAb,EAAd;;AAEA,cAAMC,UAAU,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,gBAAMC,QAAQC,KAAKC,GAAL,EAAd;AACA,4BAAMP,EAAN,CAASQ,OAAT,CAAiBV,KAAjB,EAAwBJ,GAAxB,EAA6BjB,OAAOS,QAAP,EAAiBuB,QAA9C,EAAwDV,KAAxD,EAA+D,UAACW,GAAD,EAAMC,GAAN,EAAc;AAC3E,kBAAI,CAACD,GAAL,EAAU;AACRP,qCACKQ,GADL;AAEEC,4BAAUN,KAAKC,GAAL,KAAaF;AAFzB;AAID,eALD,MAKO;AACLD,uBAAOM,GAAP;AACD;AACF,aATD;AAUD,WAZe,CAAhB;;AAcA,iBAAOR,OAAP;AACD,SAnCgB,CAAjB;;AAqCA,0BACGW,GADH,CACO9B,QADP,EAEG+B,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbC,kBAAQC,GAAR,CAAYF,GAAZ,EADa,CACK;AAClBvC;AACD,SALH,EAMG0C,KANH,CAMS,UAACC,CAAD,EAAO;AACZ3C,mBAAS2C,CAAT;AACD,SARH;AASD,OA3DD;AA4DD;;;;;;kBAGYtD,W","file":"QiniuPlugin.js","sourcesContent":["import qiniu from 'qiniu';\nimport Promise from 'promise';\nimport { join } from 'path';\nimport slash from 'slash';\n\nclass QiniuPlugin {\n\n  constructor(options) {\n    if (!options || !options.ACCESS_KEY || !options.SECRET_KEY) {\n      throw new Error('ACCESS_KEY and SECRET_KEY must be provided');\n    }\n    this.options = Object.assign({}, options);\n    qiniu.conf.ACCESS_KEY = this.options.ACCESS_KEY;\n    qiniu.conf.SECRET_KEY = this.options.SECRET_KEY;\n  }\n\n  apply(compiler) {\n    compiler.plugin('after-emit', (compilation, callback) => {\n      const assets = compilation.assets;\n      const hash = compilation.hash;\n      const {\n        bucket,\n        include,\n      } = this.options;\n      let {\n        path = '[hash]',\n      } = this.options;\n\n      path = path.replace('[hash]', hash);\n\n      const promises = Object.keys(assets).filter((fileName) => {\n        let valid = assets[fileName].emitted;\n        if (include) {\n          valid = valid\n            && include.some(\n              (includeFileName) => {\n                if (includeFileName instanceof RegExp) {\n                  return includeFileName.test(fileName);\n                }\n                return includeFileName === fileName;\n              },\n            );\n        }\n        return valid;\n      }).map((fileName) => {\n        const key = slash(join(path, fileName));\n        const putPolicy = new qiniu.rs.PutPolicy(`${bucket}:${key}`);\n        const token = putPolicy.token();\n        const extra = new qiniu.io.PutExtra();\n\n        const promise = new Promise((resolve, reject) => {\n          const begin = Date.now();\n          qiniu.io.putFile(token, key, assets[fileName].existsAt, extra, (err, ret) => {\n            if (!err) {\n              resolve({\n                ...ret,\n                duration: Date.now() - begin,\n              });\n            } else {\n              reject(err);\n            }\n          });\n        });\n\n        return promise;\n      });\n\n      Promise\n        .all(promises)\n        .then((res) => {\n          console.log(res); // eslint-disable-line no-console\n          callback();\n        })\n        .catch((e) => {\n          callback(e);\n        });\n    });\n  }\n}\n\nexport default QiniuPlugin;\n"]}