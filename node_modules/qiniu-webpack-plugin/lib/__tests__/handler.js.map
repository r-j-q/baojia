{"version":3,"sources":["../../src/__tests__/handler.js"],"names":["describe","handler","beforeEach","plugin","ACCESS_KEY","SECRET_KEY","bucket","compiler","event","cb","apply","it","done","qiniu","require","assets","a","emitted","existsAt","b","hash","expect","io","putFile","toHaveBeenCalledTimes","mock","calls","slice","toEqual","path","log","jest","fn","include","mockClear","rs","PutPolicy","c","args","length","Error","error"],"mappings":"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","file":"handler.js","sourcesContent":["import QiniuPlugin from '../QiniuPlugin';\n\ndescribe('handler', () => {\n  let handler = null;\n\n  describe('withOut filter', () => {\n    /**\n     * 在每个测试之前重置 handler\n     */\n    beforeEach(() => {\n      const plugin = new QiniuPlugin({\n        ACCESS_KEY: 'a',\n        SECRET_KEY: 's',\n        bucket: 'b'\n      });\n      const compiler = {\n        plugin: (event, cb) => {\n          handler = cb;\n        }\n      };\n      plugin.apply(compiler);\n    });\n\n    it('without filter', (done) => {\n      const qiniu = require('qiniu'); // eslint-disable-line global-require\n      handler({\n        assets: {\n          a: {\n            emitted: true,\n            existsAt: 'mockExistsAt'\n          },\n          b: {\n            emitted: true,\n            existsAt: 'mockExistsAt'\n          }\n        },\n        hash: 'mockHash'\n      }, done);\n      expect(qiniu.io.putFile).toHaveBeenCalledTimes(2);\n      expect(qiniu.io.putFile.mock.calls[0].slice(0, 3))\n        .toEqual(['mockToken', 'mockHash/a', 'mockExistsAt']);\n      expect(qiniu.io.putFile.mock.calls[1].slice(0, 3))\n        .toEqual(['mockToken', 'mockHash/b', 'mockExistsAt']);\n    });\n  });\n\n  describe('with string and regex filter', () => {\n    /**\n     * 在每个测试之前重置 handler\n     */\n    beforeEach(() => {\n      const plugin = new QiniuPlugin({\n        ACCESS_KEY: 'a',\n        SECRET_KEY: 's',\n        bucket: 'mockBucket',\n        path: '[hash]',\n        log: jest.fn(),\n        include: [\n          'a',\n          /^c$/\n        ]\n      });\n      const compiler = {\n        plugin: (event, cb) => {\n          handler = cb;\n        }\n      };\n      plugin.apply(compiler);\n    });\n\n    it('with filter', (done) => {\n      const qiniu = require('qiniu'); // eslint-disable-line global-require\n      qiniu.io.putFile.mockClear();\n      qiniu.rs.PutPolicy.mockClear();\n      handler({\n        assets: {\n          a: {\n            emitted: true,\n            existsAt: 'mockExistsAt'\n          },\n          b: {\n            emitted: true,\n            existsAt: 'mockExistsAt'\n          },\n          c: {\n            emitted: true,\n            existsAt: 'mockExistsAt'\n          }\n        },\n        hash: 'mockHash'\n      }, done);\n\n      expect(qiniu.rs.PutPolicy).toHaveBeenCalledTimes(2);\n      expect(qiniu.rs.PutPolicy.mock.calls)\n        .toEqual([['mockBucket:mockHash/a'], ['mockBucket:mockHash/c']]);\n\n      expect(qiniu.io.putFile).toHaveBeenCalledTimes(2);\n      expect(qiniu.io.putFile.mock.calls[0].slice(0, 3))\n        .toEqual(['mockToken', 'mockHash/a', 'mockExistsAt']);\n      expect(qiniu.io.putFile.mock.calls[1].slice(0, 3))\n        .toEqual(['mockToken', 'mockHash/c', 'mockExistsAt']);\n    });\n  });\n\n  describe('error', () => {\n    /**\n     * 在每个测试之前重置 handler\n     */\n    beforeEach(() => {\n      const plugin = new QiniuPlugin({\n        ACCESS_KEY: 'a',\n        SECRET_KEY: 's',\n        bucket: 'mockBucket'\n      });\n      const compiler = {\n        plugin: (event, cb) => {\n          handler = cb;\n        }\n      };\n      plugin.apply(compiler);\n    });\n\n    it('when put file', (done) => {\n      const qiniu = require('qiniu'); // eslint-disable-line global-require\n      qiniu.io.putFile.mockClear();\n      qiniu.io.putFile = jest.fn((...args) => {\n        args[args.length - 1](new Error('error'));\n      });\n      qiniu.rs.PutPolicy.mockClear();\n      handler({\n        assets: {\n          a: {\n            emitted: true,\n            existsAt: 'mockExistsAt'\n          }\n        },\n        hash: 'mockHash'\n      }, (error) => {\n        expect(error);\n        done();\n      });\n    });\n  });\n\n  describe('#3 empty path', () => {\n    /**\n     * 在每个测试之前重置 handler\n     */\n    beforeEach(() => {\n      const plugin = new QiniuPlugin({\n        ACCESS_KEY: 'a',\n        SECRET_KEY: 's',\n        bucket: 'b',\n        path: ''\n      });\n      const compiler = {\n        plugin: (event, cb) => {\n          handler = cb;\n        }\n      };\n      plugin.apply(compiler);\n    });\n\n    it('without filter', (done) => {\n      const qiniu = require('qiniu'); // eslint-disable-line global-require\n      qiniu.io.putFile.mockClear();\n      handler({\n        assets: {\n          a: {\n            emitted: true,\n            existsAt: 'mockExistsAt'\n          },\n          'index.html': {\n            emitted: true,\n            existsAt: 'mockExistsAt'\n          }\n        },\n        hash: 'mockHash'\n      }, done);\n      expect(qiniu.io.putFile).toHaveBeenCalledTimes(2);\n      expect(qiniu.io.putFile.mock.calls[0].slice(0, 3))\n        .toEqual(['mockToken', 'a', 'mockExistsAt']);\n      expect(qiniu.io.putFile.mock.calls[1].slice(0, 3))\n        .toEqual(['mockToken', 'index.html', 'mockExistsAt']);\n    });\n  });\n});\n"]}